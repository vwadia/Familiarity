% script to take in features for real face images and output 
% SA counterparts
% vwadiaMay2023

setDiskPaths

addpath([famPath filesep 'face_model_human' filesep 'Model'])

model_data = [famPath filesep 'face_model_human' filesep 'Model_Data' filesep 'Human_Face_Model_Data.mat']; output_res = [360 250];

model = AAM_Model(model_data); % instance of class AAM_model
n_ims = 60;
%% Reconstruct via 100 dim features 

load([famPath filesep 'FeatureMatching' filesep 'params_fam_100d.mat']) % loads p_fam n x 100

outPath = [famPath filesep 'FamFacesProcessed_SA'];
if ~exist(outPath)
    mkdir(outPath)
end

options = struct;
options.ndim_shape = 20;
options.normalized = false;

[im_syn, r_land] = model.gen_image_param(p_fam, output_res, options);

% print them
for i = 1:size(im_syn, 4)
    
    fname = [sprintf('%04d', i)];
    fig = figure('Visible', 'off');
    imshow(im_syn(:, :, :, i)./255);
    
    print(fig, [outPath filesep fname], '-dpng', '-r0')
    close all
    
end

%% check my landmarks against the ones generated by model
xlsFile = 'imageJ_landmarkcoords_famfaces'; % note these are for aligned, scaled, and BG free images


for i = 1:size(im_syn, 4)
    
    m_land(:, :, i) = xlsread([famPath filesep xlsFile], num2str(100+i));

end

for i = 1:size(im_syn, 4)

   vn(i, 1) = vecnorm(m_land(:, 1, i) - r_land(:, 1, i))/vecnorm(m_land(:, 1, i));
   vn(i, 2) = vecnorm(m_land(:, 2, i) - r_land(:, 2, i))/vecnorm(m_land(:, 1, i));
end


%% Reconstruct via landmarks with 300 fimensions 

imPath = [famPath filesep 'FamFacesProcessed'];
ims = Utilities.readInFiles(imPath, 'jpg');

outPath = [famPath filesep 'FamFacesProcessed_SA_ManLand'];
if ~exist(outPath)
    mkdir(outPath)
end

for im_idx = 1:n_ims
    
    im{1} = imread([ims(im_idx).folder filesep ims(im_idx).name]); % some img I marked landmarks for in imageJ
    
    sheet = num2str(100+im_idx);
    m_land(:, :, im_idx) = xlsread([famPath filesep xlsFile], sheet);
    
    % produce texture with landmarks marks
    m_param(im_idx, :) = model.compute_param(im, m_land);
    
end


[m_im, m_landmarks] =  model.gen_image_param(m_param, output_res);

for im_idx = 1:n_ims
    fig = figure('Visible', 'off');
    imshow(m_im(:, :, :, im_idx)./255);
    
    fname = sprintf('%04d', im_idx);
    print(fig, [outPath filesep fname], '-dpng', '-r0')
    close all
end

